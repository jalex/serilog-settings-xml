using System;
using System.Diagnostics;
using System.IO;
using Serilog.Context;
using Serilog.Core;
using Serilog.Events;
using Serilog.Tests.Support;
using Xunit;

namespace Serilog.Settings.Xml.Tests.Settings
{
    public sealed class XmlSettingsTests : IDisposable
    {
        private readonly Logger logger;
        private LogEvent lastEvent;

        public XmlSettingsTests()
        {
            Debugging.SelfLog.Enable(msg => Debug.WriteLine(msg));

            logger = new LoggerConfiguration()
                .ReadFrom.Xml(GetTestConfigPath("full-config.xml"))
                .WriteTo.Sink(new DelegatingSink(e => lastEvent = e))
                .CreateLogger();
        }

        [Fact]
        public void EnvironmentVariableExpansionIsApplied()
        {
            logger.Information("Has a Path property with value expanded from the environment variable");

            Assert.NotNull(lastEvent);
            Assert.NotEmpty((string)lastEvent.Properties["Path"].LiteralValue());
            Assert.NotEqual("%PATH%", lastEvent.Properties["Path"].LiteralValue());
        }

        [Fact]
        public void ThreadIdEnricherIsApplied()
        {
            logger.Information("Has a ThreadId property with value generated by ThreadIdEnricher");

            Assert.NotNull(lastEvent);
            Assert.NotNull(lastEvent.Properties["ThreadId"]);
            Assert.NotNull(lastEvent.Properties["ThreadId"].LiteralValue() as int?);
        }

        [Fact]
        public void MachineNameEnricherIsApplied()
        {
            logger.Information("Has a MachineName property with value generated by MachineNameEnricher");

            Assert.NotNull(lastEvent);
            Assert.NotNull(lastEvent.Properties["MachineName"]);
            Assert.NotEmpty((string)lastEvent.Properties["MachineName"].LiteralValue());
        }

        [Fact]
        public void EnrivonmentUserNameEnricherIsApplied()
        {
            logger.Information("Has a EnrivonmentUserName property with value generated by EnrivonmentUserNameEnricher");

            Assert.NotNull(lastEvent);
            Assert.NotNull(lastEvent.Properties["EnvironmentUserName"]);
            Assert.NotEmpty((string)lastEvent.Properties["EnvironmentUserName"].LiteralValue());
        }

        [Fact]
        public void ProcessIdEnricherIsApplied()
        {
            logger.Information("Has a ProcessId property with value generated by ProcessIdEnricher");

            Assert.NotNull(lastEvent);
            Assert.NotNull(lastEvent.Properties["ProcessId"]);
            Assert.NotNull(lastEvent.Properties["ProcessId"].LiteralValue() as int?);
        }

        [Fact]
        public void LogContextEnricherIsApplied()
        {
            using (LogContext.PushProperty("A", 1))
            {
                logger.Information("Has a LogContext property with value generated by LogContextEnricher");
            }

            Assert.NotNull(lastEvent);
            Assert.NotNull(lastEvent.Properties["A"]);
            Assert.NotNull(lastEvent.Properties["A"].LiteralValue() as int?);
            Assert.Equal(1, (int)lastEvent.Properties["A"].LiteralValue());
        }

        [Fact]
        public void EnricherWithPropertiesIsApplied()
        {
            logger.Information("Has a Application property with value setted in config file");

            Assert.NotNull(lastEvent);
            Assert.NotNull(lastEvent.Properties["Application"]);
            Assert.NotNull(lastEvent.Properties["Application"].LiteralValue() as string);
        }

        [Fact]
        public void MinimumLevelOverrideIsApplied()
        {
            // default level in config - Debug
            logger.Verbose("Verbose Message");
            Assert.Null(lastEvent);

            logger.Debug("Debug Message");
            Assert.NotNull(lastEvent);

            lastEvent = null;

            // min level for Serilog.Settings.Xml - Warning
            var contextLogger = logger.ForContext<XmlSettingsTests>();

            contextLogger.Information("Information Message");
            Assert.Null(lastEvent);

            contextLogger.Warning("Warning Message");
            Assert.NotNull(lastEvent);
        }

        [Fact]
        public void AuditToMustFailIfSinkFails()
        {
            var path = Path.Combine(Path.GetTempPath(), "SerilogLogs", "serilog-audit.txt");
            using (File.OpenWrite(path))
            {
                var auditToLogger = new LoggerConfiguration()
                    .ReadFrom.Xml(GetTestConfigPath("audit-to-invalid-config.xml"))
                    .WriteTo.Sink(new DelegatingSink(e => lastEvent = e))
                    .CreateLogger();

                Assert.Throws<IOException>(() => auditToLogger.Warning("Verbose Message"));
            }
        }

        public void Dispose()
        {
            Log.CloseAndFlush();
            logger.Dispose();
        }

        private static string GetTestConfigPath(string configFileName)
        {
            var basePath = AppDomain.CurrentDomain.BaseDirectory;
            return Path.Combine(basePath, "TestConfigs", configFileName);
        }
    }
}
