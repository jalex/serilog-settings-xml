using System;
using System.Diagnostics;
using System.IO;
using Serilog.Context;
using Serilog.Events;
using Serilog.Tests.Support;
using Xunit;

namespace Serilog.Settings.Xml.Tests.Settings
{
    public sealed class XmlSettingsTests
    {
        public XmlSettingsTests()
        {
            Debugging.SelfLog.Enable(msg => Debug.WriteLine(msg));
        }
        
        [Fact]
        public void EnvironmentVariableExpansionIsApplied()
        {
            LogEvent evt = null;
            var log = new LoggerConfiguration()
                .ReadFrom.Xml(GetTestConfigPath("full-config.xml")) 
                .WriteTo.Sink(new DelegatingSink(e => evt = e))
                .CreateLogger();

            log.Information("Has a Path property with value expanded from the environment variable");

            Assert.NotNull(evt);
            Assert.NotEmpty((string)evt.Properties["Path"].LiteralValue());
            Assert.NotEqual("%PATH%", evt.Properties["Path"].LiteralValue());
        }

        [Fact]
        public void ThreadIdEnricherIsApplied()
        {
            LogEvent evt = null;
            var log = new LoggerConfiguration()
                .ReadFrom.Xml(GetTestConfigPath("full-config.xml"))
                .WriteTo.Sink(new DelegatingSink(e => evt = e))
                .CreateLogger();

            log.Information("Has a ThreadId property with value generated by ThreadIdEnricher");

            Assert.NotNull(evt);
            Assert.NotNull(evt.Properties["ThreadId"]);
            Assert.NotNull(evt.Properties["ThreadId"].LiteralValue() as int?);
        }

        [Fact]
        public void MachineNameEnricherIsApplied()
        {
            LogEvent evt = null;
            var log = new LoggerConfiguration()
                .ReadFrom.Xml(GetTestConfigPath("full-config.xml"))
                .WriteTo.Sink(new DelegatingSink(e => evt = e))
                .CreateLogger();

            log.Information("Has a MachineName property with value generated by MachineNameEnricher");

            Assert.NotNull(evt);
            Assert.NotNull(evt.Properties["MachineName"]);
            Assert.NotEmpty((string)evt.Properties["MachineName"].LiteralValue());
        }

        [Fact]
        public void EnrivonmentUserNameEnricherIsApplied()
        {
            LogEvent evt = null;
            var log = new LoggerConfiguration()
                .ReadFrom.Xml(GetTestConfigPath("full-config.xml"))
                .WriteTo.Sink(new DelegatingSink(e => evt = e))
                .CreateLogger();

            log.Information("Has a EnrivonmentUserName property with value generated by EnrivonmentUserNameEnricher");

            Assert.NotNull(evt);
            Assert.NotNull(evt.Properties["EnvironmentUserName"]);
            Assert.NotEmpty((string)evt.Properties["EnvironmentUserName"].LiteralValue());
        }

        [Fact]
        public void ProcessIdEnricherIsApplied()
        {
            LogEvent evt = null;
            var log = new LoggerConfiguration()
                .ReadFrom.Xml(GetTestConfigPath("full-config.xml"))
                .WriteTo.Sink(new DelegatingSink(e => evt = e))
                .CreateLogger();

            log.Information("Has a ProcessId property with value generated by ProcessIdEnricher");

            Assert.NotNull(evt);
            Assert.NotNull(evt.Properties["ProcessId"]);
            Assert.NotNull(evt.Properties["ProcessId"].LiteralValue() as int?);
        }

        [Fact]
        public void LogContextEnricherIsApplied()
        {
            LogEvent evt = null;
            var log = new LoggerConfiguration()
                .ReadFrom.Xml(GetTestConfigPath("full-config.xml"))
                .WriteTo.Sink(new DelegatingSink(e => evt = e))
                .CreateLogger();

            using (LogContext.PushProperty("A", 1))
            {
                log.Information("Has a LogContext property with value generated by LogContextEnricher");
            }

            Assert.NotNull(evt);
            Assert.NotNull(evt.Properties["A"]);
            Assert.NotNull(evt.Properties["A"].LiteralValue() as int?);
            Assert.Equal(1, (int)evt.Properties["A"].LiteralValue());
        }

        [Fact]
        public void EnricherWithPropertiesIsApplied()
        {
            LogEvent evt = null;
            var log = new LoggerConfiguration()
                .ReadFrom.Xml(GetTestConfigPath("full-config.xml"))
                .WriteTo.Sink(new DelegatingSink(e => evt = e))
                .CreateLogger();

            log.Information("Has a Application property with value setted in config file");

            Assert.NotNull(evt);
            Assert.NotNull(evt.Properties["Application"]);
            Assert.NotNull(evt.Properties["Application"].LiteralValue() as string);
        }

        private static string GetTestConfigPath(string configFileName)
        {
            var basePath = AppDomain.CurrentDomain.BaseDirectory;
            return Path.Combine(basePath, "TestConfigs", configFileName);
        }
    }
}
